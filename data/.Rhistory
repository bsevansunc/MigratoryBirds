install.packages('raster', 'maps', 'inflection')
library(raster)
install.packages('maps')
source('R_scripts/MigrationSourceFunctions.R')
setwd('data')
obs = read.csv('observations.csv')
samp = read.csv('sampling.csv')
head(obs)
names(obs)
obs = obs[,c(3:6,9)]
head(obs)
revi = obs[obs$Scientific.Name == 'Vireo olivaceus',]
summary(revi)
revi$Scientific.Name = factor(revi$Scientific.Name)
summary(revi)
hist(revi$JulianDay, col = 'gray',
xlab = 'Julian day', ylab = 'Number of observations',
main = 'Histogram of observations by Julian day')
hist(revi$JulianDay, col = 'gray',border='red',
xlab = 'Julian day', ylab = 'Number of observations',
main = 'Histogram of observations by Julian day')
hist(revi$JulianDay, col = 'black',border='red',
xlab = 'Julian day', ylab = 'Number of observations',
main = 'Histogram of observations by Julian day')
dim(revi)
head(revi)
revi = revi[,-1]
head(revi)
dim(revi)
revi = unique(revi)
revi = unique(revi)
dim(revi)
names(samp)
lists = samp[,c(2:4,7)]
lists = unique(lists)
dim(samp)
dim(lists)
revi05 = revi[revi$Year == 2005 & revi$JulianDay == 150,]
dim(revi05)
pts.df = data.frame(revi05$Longitude, revi05$Latitude)
pts.sp =  SpatialPoints(pts.df, proj4string = CRS('+proj=longlat +datum=WGS84'))
e = extent(min(revi$Longitude), max(revi$Longitude),
min(revi$Latitude), max(revi$Latitude))
r = raster(e, resolution = 2)
projection(r) =  '+proj=longlat +datum=WGS84'
plot(pts.sp)
col.scale = rev(terrain.colors(4))
plot(observations.ras, col = col.scale, zlim = c(0,20))
observations.ras = rasterize(pts.sp,r, fun = 'count', background = 0)
plot(observations.ras, col = col.scale, zlim = c(0,20))
map('state', add = T)
library(maps)
map('state', add = T)
# Now you! Follow the steps above to calculate the number of spatially
# unique eBird checklists per grid cell on Julian day 150 of 2005 and
# plot the map. We will use this raster layer later. Please assign the
# name "lists.ras" to this raster.
# Subset the data frame:
lists05 = lists[lists$Year == 2005 & lists$JulianDay == 150,]
# Create a data frame of points and observations:
pts.ldf = data.frame(lists05$Longitude, lists05$Latitude)
# Convert points to spatial:
pts.lsp =  SpatialPoints(pts.ldf, proj4string = CRS('+proj=longlat +datum=WGS84'))
# Count the number of observations within a grid cell:
lists.ras = rasterize(pts.lsp,r, fun = 'count', background = 0)
# Set the raster color scale:
col.scale = rev(terrain.colors(4))
# To explore this, let's make a raster plotting function
plot(lists.ras, col = col.scale, zlim = c(0,20))
# Add states for geographic reference:
map('state', add = T)
revi.prop = observations.ras/lists.ras
col.scale = rev(terrain.colors(99))
plot(revi.prop, col = col.scale, zlim = c(0,1))
map('state', add = T)
prop.by.DayYear(150,2005)
prop.by.DayYear(150,2005)
plot(prop.by.DayYear(150, 2005),
col = col.scale, zlim = c(0,1))
map('state', add = T)
jdays = seq(min(obs$JulianDay),max(obs$JulianDay))
for (i in 1:length(jdays)){
plot(prop.by.DayYear(jdays[i], 2005),
col = col.scale, zlim = c(0,1),
main = paste('Julian day = ', jdays[i]))
map('state', add = T)
}
jdays = seq(min(obs$JulianDay),max(obs$JulianDay))
for (i in 1:length(jdays)){
plot(prop.by.DayYear(jdays[i], 2005),
col = col.scale, zlim = c(0,1),
main = paste('Julian day = ', jdays[i]))
map('state', add = T)
}
for (i in 1:length(jdays)){
plot(prop.by.DayYear(jdays[i], 2005),
col = col.scale, zlim = c(0,1),
main = paste('Julian day = ', jdays[i]))
map('state', add = T)
}
for (i in 1:length(jdays)){
plot(prop.by.DayYear(jdays[i], 2005),
col = col.scale, zlim = c(0,1),
main = paste('Julian day = ', jdays[i]))
map('state', add = T)
}
for (i in 1:length(jdays)){
plot(prop.by.DayYear(jdays[i], 2005),
col = col.scale, zlim = c(0,1),
main = paste('Julian day = ', jdays[i]))
map('state', add = T)
}
prop.CellDayYear = function(cell, day, year){
r = prop.by.DayYear(day, year)
extract(r, cell)
}
prop.CellDayYear = function(cell, day, year){
r = prop.by.DayYear(day, year)
extract(r, cell)
}
plot(observations.ras)
map('state', add = T)
click(observations.ras, cell = T)
click(observations.ras, cell = T)
install.packages('Jags')
install.packages('jags')
install.packages('R2jags')
install.packages('rjags')
install.packages('rjags')
install.packages("~/Desktop/rjags_3-13.tgz", repos = NULL)
install.packages("~/Desktop/rjags_3-13.tgz", repos = NULL, lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(jags)
library(rjags)
